<?php
require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

if (!defined('SECRET')) define('SECRET', 'bilibili');

//发送邮件函数
function send($to, $subject, $html) {
  $connection = new AMQPConnection('localhost', 5672, 'guest', 'guest');
  $channel = $connection->channel();
  $channel->exchange_declare('sse', 'direct', false, true, true);
  $channel->queue_declare('mail', false, true, false, true);
  $channel->queue_bind('mail', 'sse', 'mail');
  $channel->basic_publish(new AMQPMessage(json_encode([
    'to' => $to,
    'subject' => $subject,
    'html' => $html,
  ])), 'sse', 'mail');
  $channel->close();
  $connection->close();
}

//初始化module
function sse_subscription_install() {
    variable_set('sse_subscription_secret', sha1(drupal_random_bytes(16)));
    variable_set('sse_subscription_token', sha1(drupal_random_bytes(16)));
}

//帮助信息
function sse_subscription_help($path, $arg) {
    switch ($path) {
        case 'admin/help#sse_subscription':
            return '<p>'.t('同济大学软件学院订阅系统，使用前请在设置里面填好相应属性的机器名');
            break;
    }
}

function sse_subscription_menu() {
    $items = array();

    //输入邮箱的地方
    $items['sse_subscription/enter'] = array(
        'title' => '输入邮箱',
        'page callback' => '_sse_subscription_enter_page',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );

    //发送邮件的请求
    $items['sse_subscription/send'] = array(
        'title' => '已发送',
        'page callback' => '_sse_subscription_send_page',
        'access callback' => TRUE,
        'type' => MENU_NORMAL_ITEM,
    );


    //设置菜单
    $items['admin/config/services/sse_subscription'] = array(
        'title' => '配置通知订阅',
        'description' => '配置 SSE 通知订阅模块的相关设置',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sse_subscription_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    //用户点击链接进来
    $items['sse_subscription/subscribe/%/%'] = array(
        'title' => '订阅',
        'page callback' => '_sse_subscription_page',
        'access callback' => 'verify_hmac',
        'access arguments' => array(2, 3),
        'type' => MENU_NORMAL_ITEM,
    );

    //取消链接
    $items['sse_subscription/cancel/%/%'] = array(
         'title' => '取消订阅通知成功！',
         'page callback' => '_sse_subscription_cancel_page',
         'page arguments' => array(2),
         'access callback' => 'verify_cancel_token',
         'access arguments' => array(2, 3),
         'type' => MENU_NORMAL_ITEM,
    );

    //推送API
    $items['sse_subscription/api/get_article/%/%'] = array(
        'title' => 'Get Article',
        'page callback' => '_sse_subscription_get_article',
        'page arguments' => array(4),
        'access callback' => 'verify_api_token',
        'access arguments' => array(3),
        'type' => MENU_CALLBACK,
    );

    return $items;
}

//处理表单
//存储用户的类别
function handle_subscribe() {
    $email = $_SESSION['sse_subscription_email'];
    $now = time();

    //第一步，清除该用户的原始订阅
    $number_of_rows = db_select('sse_subscribe_mail')
        ->condition('mail', $email)
        ->countQuery()
        ->execute()
        ->fetchField();
    if ($number_of_rows == 0) {
        //新建一个用户
        $cancle_token = sha1($now);

        db_insert('sse_subscribe_mail')
            ->fields(array(
                'mail' => $email,
                'cancel_token' => $cancle_token,
            ))
            ->execute();
    }

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 0,
            'ua' => $_SERVER['HTTP_USER_AGENT'],
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //第二步，处理订阅信息，Insert笛卡尔集
    foreach ($_POST['type'] as $type_id) {
        if (taxonomy_term_load($type_id) === false) {
            continue;
        }
        foreach ($_POST['group'] as $group_id) {
            if (taxonomy_term_load($group_id) === false) {
                continue;
            }
            db_insert('sse_subscribe_data')
                ->fields(array(
                    'sid' => $sid,
                    'target_tid' => $group_id,
                    'category_tid' => $type_id,
                ))
                ->execute();
        }
    }

    //返回成功的json
    //返回个鬼
}



//设置菜单
function sse_subscription_config_form($form, $form_state) {
    $form['sse_subscription_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('hmac用到的密钥'),
        '#default_value' => variable_get('sse_subscription_secret'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['sse_subscription_token'] = array(
        '#type' => 'textfield',
        '#title' => t('获取推送文章api权限的token'),
        '#default_value' => variable_get('sse_subscription_token'),
        '#size' => 30,
        '#required' => TRUE,
    );

    return system_settings_form($form);
}


//订阅表单
function sse_subscription_form($form, $form_state) {
    //邮箱
    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('请输入您要订阅的邮箱'),
        '#size' => 30,
        '#maxlength' => 320,
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => '订阅',
    );

    return $form;
}

//添加权限
function sse_subscription_permission() {
    return array(
        'access sse_subscription content' => array(
            'title' => t('Access content for the Subscription'),
        )
    );
}

function verify_api_token($token) {
    $module_token = variable_get('sse_subscription_token');
    if (hash_equals($module_token, $token)) {
        return true;
    } else {
        return false;
    }
}

//验证用户hmac
function verify_hmac($email, $token) {
    if ($email == null || $token == null)
        return false;

    $secret = variable_get('sse_subscription_secret');
    $hmac = drupal_hmac_base64($email, $secret);

    if ($hmac == $token) {
        $_SESSION['sse_subscription_email'] = $email;
        return true;
    }
    else
        return false;
}

//验证cancel_token
function verify_cancel_token($email, $token) {
    if ($email == null || $token == null)
        return false;

    $cancel_token = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('cancel_token'))
        ->execute()
        ->fetch();

    if (!$cancel_token)
        return false;

    $cancel_token = $cancel_token->cancel_token;

    if ($cancel_token != null && $cancel_token == $token)
        return true;
    else
        return false;
}

function _sse_subscription_enter_page() {
    return theme("sse_subscription_enter");
}


//发送邮件
function _sse_subscription_send_page() {
    $email = $_POST['mail'];
    $secret = variable_get('sse_subscription_secret');
    $hmac = drupal_hmac_base64($email, $secret);

    $url = url('sse_subscription/subscribe/'.$email.'/'.$hmac, array('absolute' => TRUE));

    send($email, 'SSE订阅确认', '<p>请点击以下链接完成订阅：</p>'.$url);

    return theme("sse_subscription_send");
}

//订阅菜单
function _sse_subscription_page() {
    if ($_POST) {
        //处理表单
        handle_subscribe();
    }

    $machine_name = 'notice_target';

    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level1 = taxonomy_get_tree($vid);

    $temp = '';
    $content = '';
    foreach ($level1 as $item) {
        $tid = $item->tid;

        if ($item->depth != 0) {
            $temp = $temp.'<input id="checkbox'.$tid.'" type="checkbox" name="group[]" value="'.$tid.'" class="css-checkbox">
                <label for="checkbox'.$tid.'" class="css-label sme depressed" style="width: 122.5px;">'.$item->name.'</label>';
        } else {
            if ($temp != '') {
                //先处理上次的结果
                $temp = $temp.'</div>';
                $content = $content.$temp;
                $temp = '';
            }
            $temp = '<div class="class-layer">';
            $temp = $temp.'<input id="checkbox'.$tid.'" type="checkbox" name="group[]" value="'.$tid.'" class="css-checkbox">
                <label for="checkbox'.$tid.'" class="css-label sme depressed" style="width: 122.5px;">'.$item->name.'</label>';
        }
    }
    if ($temp != '') {
        //先处理上次的结果
        $temp = $temp.'</div>';
        $content = $content.$temp;
        $temp = '';
    }
    $group = $content;

    $machine_name = 'notice_category';
    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level1 = taxonomy_get_tree($vid);

    $temp = '<div class="class-layer">';
    $content = '';
    foreach ($level1 as $item) {
        $tid = $item->tid;

        $temp = $temp.'<input id="checkbox'.$tid.'" type="checkbox" name="type[]" value="'.$tid.'" class="css-checkbox">
            <label for="checkbox'.$tid.'" class="css-label sme depressed" style="width: 122.5px;">'.$item->name.'</label>';
    }
    if ($temp != '') {
        //先处理上次的结果
        $temp = $temp.'</div>';
        $content = $content.$temp;
        $temp = '';
    }
    $type = $content;

    $email = $_SESSION['sse_subscription_email'];
    return theme("sse_subscription_sub", array("email" => $email, "group" => $group, "type" => $type));
}

function _sse_subscription_cancel_page($email) {
    $now = time();

    //清除该用户的原始订阅

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 1,
            'ua' => $_SERVER['HTTP_USER_AGENT'],
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //删除mail表
    db_delete('sse_subscribe_mail')
        ->condition('mail', $email)
        ->execute();

    return theme("sse_subscription_unsub", array("email" => $email));

}

function taxonomy_get_term_from_vid($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->fields('t', array('tid', 'name'));
    $query->condition('t.vid', $vid, '=');
    //$query->condition('h.parent', 0, '='); // remove this line to get all terms.
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $data[$record['tid']] = t($record['name']);
    }

    return $data;
}

function get_node_json_from_nid($nid) {
    $node = node_load($nid);
    $result = [];

    $target_tid = [];
    $category_tid = [];

    $field_qunti = 'field_notice_target';
    $field_leibie = 'field_notice_category';
    $field_deadline = 'field_notice_deadline';

    $arr = $node->{$field_qunti}[LANGUAGE_NONE];
    $result['category_target'] = [];
    foreach ($arr as $n) {
        $name = taxonomy_term_load((int)$n['tid'])->name;
        $target_tid[] = (int)$n['tid'];
        $result['category_target'][] = taxonomy_term_load((int)$n['tid'])->name;
    }

    $arr = $node->{$field_leibie}[LANGUAGE_NONE];
    $result['category_content'] = [];
    foreach ($arr as $n) {
        $category_tid[] = (int)$n['tid'];
        $result['category_content'][] = taxonomy_term_load((int)$n['tid'])->name;
    }

    $arr = $node->{$field_deadline};
    if (empty($arr))
        $result['deadline_field'] = '';
    else
        $result['deadline_field'] = $arr[LANGUAGE_NONE][0]['value'];

    $result['title'] = $node->title;
    $result['publish_at'] = $node->created;
    $result['body'] = $node->body[LANGUAGE_NONE][0]['value'];

    $options = array('absolute' => TRUE);
    $result['link'] = url('node/'.$nid, $options);

    //查询email
    $result_set = db_query("SELECT DISTINCT mail, cancel_token FROM sse_subscribe_data DATA LEFT JOIN sse_subscribe_mail MAIL ON MAIL.sid = DATA.sid
        WHERE DATA.target_tid IN (:target_tids) AND DATA.category_tid IN (:category_tids)", array(
            ':target_tids' => $target_tid,
            ':category_tids' => $category_tid,
        ));
    foreach ($result_set as $target_mail) {
        $subscribe_mail = [];
        $subscribe_mail['mail'] = $target_mail->mail;
        $subscribe_mail['cancel_token'] = $target_mail->cancel_token;
        $result['subscribe_mails'][] = $subscribe_mail;
    }

    return $result;
}

function _sse_subscription_get_article($from) {
    $nids = db_select('node', 'n')
        ->condition('type', 'notice_content')
        ->condition('status', 1)
        ->condition('changed', (int)$from, '>')
        ->fields('n', array('nid'))
        ->execute();

    $result = [];
    foreach ($nids as $record) {
        $result[] = get_node_json_from_nid($record->nid);
    }

    drupal_json_output($result);
}

function sse_subscription_theme() {

    return array(
        'sse_subscription_enter' => array(
            'template' => 'sse_subscription_enter',
        ),
        'sse_subscription_sub' => array(
            'template' => 'sse_subscription_sub',
            'variables' => array('email' => null, 'group' => null, 'type' => null),
        ),
        'sse_subscription_unsub' => array(
            'template' => 'sse_subscription_unsub',
            'variables' => array('email' => null),
        ),
        'sse_subscription_send' => array(
            'template' => 'sse_subscription_send',
        ),
    );
}
