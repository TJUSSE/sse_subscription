<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

define('SECRET', 'bilibili');
define('BASE_URL', 'http://localhost:8002/drupal');

//发送邮件函数
function send($to, $subject, $html) {
  $connection = new AMQPConnection('localhost', 5672, 'guest', 'guest');
  $channel = $connection->channel();
  $channel->exchange_declare('sse', 'direct', false, true, true);
  $channel->queue_declare('mail', false, true, false, true);
  $channel->queue_bind('mail', 'sse', 'mail');
  $channel->basic_publish(new AMQPMessage(json_encode([
    'to' => $to,
    'subject' => $subject,
    'html' => $html,
  ])), 'sse', 'mail');
  $channel->close();
  $connection->close();
}

//帮助信息
function sse_subscription_help($path, $arg) {
    switch ($path) {
        case 'admin/help#sse_subscription':
            return '<p>'.t('Just enable it!');
            break;
    }
}

//block信息
function sse_subscription_block_info() {
    $blocks['sse_subscription'] = array(
        'info' => t('sse_subscription'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

//前端页面
function sse_subscription_block_view($delta = '') {
    switch ($delta) {
        case 'sse_subscription':
            $block['subject'] = t('订阅');
            $block['content'] = drupal_get_form('sse_subscription_form');

            return $block;
    }
}

function sse_subscription_menu() {
    $items = array();

    //设置菜单，暂时没用
    $items['admin/config/content/sse_subscription'] = array(
        'title' => '设置Machine Name',
        'description' => 'Configuration for sse_subscription module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sse_subscription_config_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    //用户点击链接进来
    $items['sse_subscription/subscribe/%/%'] = array(
        'title' => '订阅',
        'page callback' => '_sse_subscription_page',
        'access callback' => 'verify_hmac',
        'access arguments' => array(2, 3),
        'type' => MENU_NORMAL_ITEM,
    );

    //取消链接
    $items['sse_subscription/cancel/%/%'] = array(
         'title' => '取消订阅通知成功！',
         'page callback' => '_sse_subscription_cancel_page',
         'page arguments' => array(2),
         'access callback' => 'verify_cancel_token',
         'access arguments' => array(2, 3),
         'type' => MENU_NORMAL_ITEM,
    );

    $items['sse_subscription/api/get_article/%'] = array(
        'title' => 'Get Article',
        'page callback' => '_sse_subscription_get_article',
        'page arguments' => array(3),
        'access callback' => TRUE,
        'type' => MENU_CALLBACK,
    );

    return $items;
}

//选择表单
function sse_subscription_check_form($form, $form_state) {
    //首先获取一级分类

    $machine_name = variable_get('_qunti');
    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level1 = taxonomy_get_term_from_vid($vid);

    $machine_name = variable_get('_leibie');
    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level2 = taxonomy_get_term_from_vid($vid);

    $form['group'] = array(
        '#title' => t('面向群体'),
        '#type' => 'checkboxes',
        '#options' => $level1,
        '#required' => TRUE,
    );

    $form['content_type'] = array(
        '#title' => t('内容分类'),
        '#type' => 'checkboxes',
        '#options' => $level2,
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => '确定',
    );

    return $form;
}

//处理表单
//存储用户的类别
function sse_subscription_check_form_submit($form, &$form_state) {
    $email = $_SESSION['email'];
    $date = new DateTime();
    $now = $date->getTimestamp();

    //第一步，清除该用户的原始订阅
    $number_of_rows = db_select('sse_subscribe_mail')
        ->condition('mail', $email)
        ->countQuery()
        ->execute()
        ->fetchField();
    if ($number_of_rows == 0) {
        //新建一个用户
        $cancle_token = md5($now);

        db_insert('sse_subscribe_mail')
            ->fields(array(
                'mail' => $email,
                'cancel_token' => $cancle_token,
            ))
            ->execute();
    }

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 0,
            'ua' => $_SERVER['HTTP_USER_AGENT'],
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //第二步，处理订阅信息，Insert笛卡尔集
    foreach ($form_state['values']['group'] as $group_id => $group_status) {
        foreach ($form_state['values']['content_type'] as $type_id => $type_status) {
            if ($group_status > 0 && $type_status >0) {
                db_insert('sse_subscribe_data')
                    ->fields(array(
                        'sid' => $sid,
                        'target_tid' => $group_id,
                        'category_tid' => $type_id,
                    ))
                    ->execute();
            }
        }
    }

    drupal_set_message(t('操作成功'));
}

//设置菜单
function sse_subscription_config_form($form, $form_state) {
    $form['_leibie'] = array(
        '#type' => 'textfield',
        '#title' => t('类别vocabulary machine name'),
        '#default_value' => variable_get('_leibie', '_leibie'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['_qunti'] = array(
        '#type' => 'textfield',
        '#title' => t('群体vocabulary machine name'),
        '#default_value' => variable_get('_qunti', '_qunti'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['field_leibie'] = array(
        '#type' => 'textfield',
        '#title' => t('类别field machine name'),
        '#default_value' => variable_get('field_leibie', 'field__fenlei'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['field_qunti'] = array(
        '#type' => 'textfield',
        '#title' => t('群体field machine name'),
        '#default_value' => variable_get('field_qunti', 'field_mianxiangqunti'),
        '#size' => 30,
        '#required' => TRUE,
    );

    $form['field_deadline'] = array(
        '#type' => 'textfield',
        '#title' => t('死期field machine name'),
        '#default_value' => variable_get('field_qunti', 'field_deadline'),
        '#size' => 30,
        '#required' => TRUE,
    );

    return system_settings_form($form);
}


//订阅表单
function sse_subscription_form($form, $form_state) {
    //邮箱
    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('请输入您要订阅的邮箱'),
        '#size' => 30,
        '#maxlength' => 320,
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => '订阅',
    );

    return $form;
}

//表单验证
function sse_subscription_form_validate($form, &$form_state){
    $email = $form_state['values']['email'];

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
         form_set_error('email', t('请输入正确的邮箱地址！'));
    }
}

//处理表单
//向用户发送邮件
function sse_subscription_form_submit($form, &$form_state) {
    $email = $form_state['values']['email'];
    $hmac = hash_hmac('md5', $email, constant('SECRET'));

    $url = constant('BASE_URL').'/sse_subscription/subscribe/'.$email.'/'.$hmac;

    send($email, 'SSE订阅确认', '<p>请点击以下链接完成订阅：</p>'.$url);

    drupal_set_message(t('系统已向您的邮箱发送了一封确认邮件，请进入邮箱点击链接完成后续操作'));
}

//添加权限
function sse_subscription_permission() {
    return array(
        'access sse_subscription content' => array(
            'title' => t('Access content for the Subscription'),
        )
    );
}

//验证用户hmac
function verify_hmac($email, $token) {
    if ($email == null || $token == null)
        return false;

    $hmac = hash_hmac('md5', $email, constant('SECRET'));
    if ($hmac == $token) {
        $_SESSION['email'] = $email;
        return true;
    }
    else
        return false;
}

//验证cancel_token
function verify_cancel_token($email, $token) {
    if ($email == null || $token == null)
        return false;

    $cancel_token = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('cancel_token'))
        ->execute()
        ->fetch();

    if (!$cancel_token)
        return false;

    $cancel_token = $cancel_token->cancel_token;

    if ($cancel_token != null && $cancel_token == $token)
        return true;
    else
        return false;
}

function _sse_subscription_page() {
    return drupal_get_form('sse_subscription_check_form');
}

function _sse_subscription_cancel_page($email) {
    $date = new DateTime();
    $now = $date->getTimestamp();

    //清除该用户的原始订阅

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 1,
            'ua' => $_SERVER['HTTP_USER_AGENT'],
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //删除mail表
    db_delete('sse_subscribe_mail')
        ->condition('mail', $email)
        ->execute();

    $page = array(
        '#markup' => '',
    );

    return $page;
}

function taxonomy_get_term_from_vid($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->fields('t', array('tid', 'name'));
    $query->condition('t.vid', $vid, '=');
    //$query->condition('h.parent', 0, '='); // remove this line to get all terms.
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $data[$record['tid']] = t($record['name']);
    }

    return $data;
}

function get_node_json_from_nid($nid) {
    $node = node_load($nid);
    $result = [];

    $field_qunti = variable_get('field_qunti');
    $field_leibie = variable_get('field_leibie');
    $field_deadline = variable_get('field_deadline');

    $arr = $node->{$field_qunti}['und'];
    $result['category_target'] = [];
    foreach($arr as $n)
        $result['category_target'][] = taxonomy_term_load((int)$n['tid'])->name;

    $arr = $node->{$field_leibie}['und'];
    $result['category_content'] = [];
    foreach($arr as $n)
        $result['category_content'][] = taxonomy_term_load((int)$n['tid'])->name;

    $arr = $node->{$field_deadline}['und'][0]['safe_value'];
    if (empty($arr))
        $result['deadline_field'] = '';
    else
        $result['deadline_field'] = $arr;

    $result['title'] = $node->title;
    $result['publish_at'] = $node->created;
    $result['body'] = $node->body['und'][0]['safe_value'];

    $options = array('absolute' => TRUE);
    $result['link'] = url('node/'.$nid, $options);

    return $result;
}

function _sse_subscription_get_article($from) {

    $nids = db_select('node', 'n')
        ->condition('changed', (int)$from, '>')
        ->condition('type', 'tongzhi')
        ->fields('n', array('nid'))
        ->execute();

    $result = [];
    foreach ($nids as $record)
        $result[] = get_node_json_from_nid($record->nid);


    //drupal_json_output(node_load(1));
    drupal_json_output($result);
}
