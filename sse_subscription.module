<?php

require_once __DIR__ . '/vendor/autoload.php';
use PhpAmqpLib\Connection\AMQPConnection;
use PhpAmqpLib\Message\AMQPMessage;

error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

define('SECRET', 'bilibili');
define('BASE_URL', 'http://localhost:8002/drupal');


function send($to, $subject, $html) {
  $connection = new AMQPConnection('localhost', 5672, 'guest', 'guest');
  $channel = $connection->channel();
  $channel->exchange_declare('sse', 'direct', false, true, true);
  $channel->queue_declare('mail', false, true, false, true);
  $channel->queue_bind('mail', 'sse', 'mail');
  $channel->basic_publish(new AMQPMessage(json_encode([
    'to' => $to,
    'subject' => $subject,
    'html' => $html,
  ])), 'sse', 'mail');
  $channel->close();
  $connection->close();
}


//帮助信息
function sse_subscription_help($path, $arg) {
    switch ($path) {
        case 'admin/help#sse_subscription':
            return '<p>'.t('Just enable it!');
            break;
    }
}

//block信息
function sse_subscription_block_info() {
    $blocks['sse_subscription'] = array(
        'info' => t('sse_subscription'),
        'cache' => DRUPAL_CACHE_PER_ROLE,
    );
    return $blocks;
}

//暂时没用
function sse_subscription_contents($display) {
    //Get today's date.
    $today = getdate();
    //Calculate the date a week ago.
    $start_time = mktime(0, 0, 0,$today['mon'],($today['mday'] - 7), $today['year']);
    //Get all posts from one week ago to the present.
    $end_time = time();

    $max_num = variable_get('current_posts_max', 3);

    //Use Database API to retrieve current posts.
    $query = db_select('node', 'n')
        ->fields('n', array('nid', 'title', 'created'))
        ->condition('status', 1) //Published.
        ->condition('created', array($start_time, $end_time), 'BETWEEN')
        ->orderBy('created', 'DESC'); //Most recent first.

    if ($display == 'block') {
        $query->range(0, $max_num);
    }

    return $query->execute();
}

//前端页面
function sse_subscription_block_view($delta = '') {
    switch ($delta) {
        case 'sse_subscription':
            $block['subject'] = t('订阅');
            $block['content'] = drupal_get_form('sse_subscription_form');

            return $block;
    }
}

function sse_subscription_menu() {
    $items = array();

    //设置菜单，暂时没用
    $items['admin/config/content/sse_subscription'] = array(
        'title' => 'Current posts',
        'description' => 'Configuration for sse_subscription module',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sse_subscription_form'),
        'access arguments' => array('access administration pages'),
        'type' => MENU_NORMAL_ITEM,
    );

    //用户点击链接进来
    $items['sse_subscription/%/%'] = array(
        'title' => 'Current posts',
        'page callback' => '_sse_subscription_page',
        'access arguments' => array('access sse_subscription content'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

//表单页面
function sse_subscription_form($form, $form_state) {

    //邮箱
    $form['email'] = array(
        '#type' => 'textfield',
        '#title' => t('请输入您要订阅的邮箱'),
        '#size' => 30,
        '#maxlength' => 320,
        //'#description' => t('The maximum number of links to display in the block.'),
        '#required' => TRUE,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => '订阅',
    );

    return $form;
    //return system_settings_form($form);
}

//表单验证
function sse_subscription_form_validate($form, &$form_state){
    $email = $form_state['values']['email'];

    if (!filter_var($email, FILTER_VALIDATE_EMAIL)) {
         form_set_error('email', t('请输入正确的邮箱地址！'));
    }
}

//处理表单
//向用户发送邮件
function sse_subscription_form_submit($form, &$form_state) {
    $email = $form_state['values']['email'];
    $hmac = hash_hmac('md5', $email, constant('SECRET'));

    $url = constant('BASE_URL').'/sse_subscription/'.$email.'/'.$hmac;

    send($email, 'SSE订阅确认', '<p>请点击以下链接完成订阅：</p>'.$url);

    drupal_set_message(t('系统已向您的邮箱发送了一封确认邮件，请进入邮箱点击链接完成后续操作'));
}

//添加权限
function sse_subscription_permission() {
    return array(
        'accsee sse_subscription content' => array(
            'title' => t('Access content for the Subscription'),
        )
    );
}

function _sse_subscription_page($arg1=null, $arg2=null) {
/*    if ($arg1 != null)*/
        //echo $arg1;
    //else
        /*echo "aaa";*/
    $result = sse_subscription_contents('page');
    $items = array();

    foreach ($result as $node) {
        $items[] = array(
            'data' => l($node->title, 'node/'.$node->nid),
        );
    }

    if (empty($items)) {
        $page_array['current_posts_arguments'] = array(
            '#title' => t('All posts from the last week'),
            '#markup' => t('No posts available.'),
        );
        return $page_array;
    } else {
        $page_array['current_posts_arguments'] = array(
            '#title' => t('All posts from the last week'),
            '#items' => $items,
            '#theme' => 'item_list__sse_subscription',
        );
        return $page_array;
    }
}

