<?php

require_once __DIR__ . '/vendor/autoload.php';

/**
 * 将邮件以高优先级增加到发送队列中
 */
function sse_subscription_send_mail($to, $subject, $html) {
    $connection = new \PhpAmqpLib\Connection\AMQPConnection(
        variable_get('sse_subscription_conn_hostname'),
        variable_get('sse_subscription_conn_port'),
        variable_get('sse_subscription_conn_username'),
        variable_get('sse_subscription_conn_password')
    );
    $channel = $connection->channel();
    $channel->exchange_declare(
        'sse',      // exchange name
        'direct',   // type
        false,      // passive
        true,       // durable
        false       // auto_delete
    );
    $channel->queue_declare(
        'mail',     // queue name
        false,      // passive
        true,       // durable
        false,      // exclusive
        false,      // auto_delete
        false,      // nowait
        new \PhpAmqpLib\Wire\AMQPTable([
            'x-max-priority' => 5
        ])
    );
    $channel->queue_bind('mail', 'sse', 'mail');
    $channel->basic_publish(new \PhpAmqpLib\Message\AMQPMessage(json_encode([
        'to' => $to,
        'subject' => $subject,
        'html' => $html,
    ]), [
        'delivery_mode' => 2,   // persistent
        'priority' => 5,        // priority
    ]), 'sse', 'mail');
    $channel->close();
    $connection->close();
}

/**
 * implement hook_menu()
 */
function sse_subscription_menu() {
    $items = array();

    //输入邮箱页面
    $items['subscribe'] = array(
        'title' => '订阅',
        'page callback' => 'sse_subscription_handle_start_page',
        'access arguments' => array('use sse_subscription functionality'),
        'type' => MENU_CALLBACK,
    );

    //点击验证链接
    //subscribe/verify/:email/:hmac
    $items['subscribe/verify/%/%'] = array(
        'title' => '订阅',
        'page callback' => 'sse_subscription_handle_verify_page',
        'page arguments' => array(2, 3),
        'access callback' => 'sse_subscription_handle_verify_page_check',
        'access arguments' => array(2, 3),
        'type' => MENU_CALLBACK,
    );

    //点击取消链接
    //subscribe/cancel/:email/:cancel_token
    $items['subscribe/cancel/%/%'] = array(
         'title' => '取消订阅通知成功！',
         'page callback' => 'sse_subscription_handle_cancel_page',
         'page arguments' => array(2),
         'access callback' => 'sse_subscription_handle_cancel_page_check',
         'access arguments' => array(2, 3),
         'type' => MENU_CALLBACK,
    );

    //查询需要推送的文章
    //subscribe/api/get_article/:token/:since
    $items['subscribe/api/get_article/%/%'] = array(
        'title' => 'Get Article',
        'page callback' => 'sse_subscription_handle_get_article_api',
        'page arguments' => array(4),
        'access callback' => 'sse_subscription_handle_get_article_api_check',
        'access arguments' => array(3),
        'type' => MENU_CALLBACK,
    );

    //配置
    $items['admin/config/services/sse_subscription'] = array(
        'title' => '通知订阅',
        'description' => '配置通知订阅',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('sse_subscription_config_form'),
        'access arguments' => array('administer sse_subscription'),
        'type' => MENU_NORMAL_ITEM,
    );

    return $items;
}

/**
 * 验证链接（订阅）页面 POST 处理
 */
function sse_subscription_handle_verify_page_post($email, $hmac) {
    $email = $_SESSION['sse_subscription_email'];
    $now = time();

    //第一步，清除该用户的原始订阅
    $number_of_rows = db_select('sse_subscribe_mail')
        ->condition('mail', $email)
        ->countQuery()
        ->execute()
        ->fetchField();

    if ($number_of_rows === '0') {
        //新建一个用户
        $cancle_token = sha1($now);

        db_insert('sse_subscribe_mail')
            ->fields(array(
                'mail' => $email,
                'cancel_token' => $cancle_token,
            ))
            ->execute();
    }

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 0,
            'ua' => isset($_SERVER['HTTP_USER_AGENT'])? $_SERVER['HTTP_USER_AGENT'] : null,
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //第二步，处理订阅信息，Insert笛卡尔集
    foreach ($_POST['type'] as $type_id) {
        if (taxonomy_term_load($type_id) === false) {
            continue;
        }
        foreach ($_POST['group'] as $group_id) {
            if (taxonomy_term_load($group_id) === false) {
                continue;
            }
            db_insert('sse_subscribe_data')
                ->fields(array(
                    'sid' => $sid,
                    'target_tid' => $group_id,
                    'category_tid' => $type_id,
                ))
                ->execute();
        }
    }

    //返回成功的json
    //返回个鬼
}

/**
 * 配置表单
 */
function sse_subscription_config_form($form, $form_state) {
    $form['sse_subscription_conn_hostname'] = array(
        '#type' => 'textfield',
        '#title' => t('消息队列服务器'),
        '#default_value' => variable_get('sse_subscription_conn_hostname'),
        '#size' => 50,
        '#required' => TRUE,
    );
    $form['sse_subscription_conn_port'] = array(
        '#type' => 'textfield',
        '#title' => t('消息队列端口'),
        '#default_value' => variable_get('sse_subscription_conn_port'),
        '#size' => 50,
        '#required' => TRUE,
    );
    $form['sse_subscription_conn_username'] = array(
        '#type' => 'textfield',
        '#title' => t('消息队列认证用户名'),
        '#default_value' => variable_get('sse_subscription_conn_username'),
        '#size' => 50,
        '#required' => TRUE,
    );
    $form['sse_subscription_conn_password'] = array(
        '#type' => 'textfield',
        '#title' => t('消息队列认证密码'),
        '#default_value' => variable_get('sse_subscription_conn_password'),
        '#size' => 50,
        '#required' => TRUE,
    );
    $form['sse_subscription_secret'] = array(
        '#type' => 'textfield',
        '#title' => t('HMAC Secret'),
        '#description' => t('该密钥用于生成不可伪造的 Email HMAC，在订阅确认邮件中使用'),
        '#default_value' => variable_get('sse_subscription_secret'),
        '#size' => 80,
        '#required' => TRUE,
    );
    $form['sse_subscription_token'] = array(
        '#type' => 'textfield',
        '#title' => t('API Token'),
        '#description' => t('该令牌用于访问获取推送文章接口，在 push-service 中使用'),
        '#default_value' => variable_get('sse_subscription_token'),
        '#size' => 80,
        '#required' => TRUE,
    );
    return system_settings_form($form);
}

/**
 * implement hook_permission()
 *
 * 声明权限
 */
function sse_subscription_permission() {
    return array(
        'administer sse_subscription' => array(
            'title' => t('管理 SSE 订阅模块')
        ),
        'use sse_subscription functionality' => array(
            'title' => t('订阅通知')
        )
    );
}

function sse_subscription_handle_get_article_api_check($token) {
    $module_token = variable_get('sse_subscription_token');
    return hash_equals($module_token, $token);
}

//验证用户hmac
function sse_subscription_handle_verify_page_check($email, $token) {
    if (!user_access('use sse_subscription functionality')) {
        return false;
    }
    if ($email === null || $token === null) {
        return false;
    }

    $secret = variable_get('sse_subscription_secret');
    $hmac = drupal_hmac_base64($email, $secret);

    // check HMAC
    $secret = variable_get('sse_subscription_secret');
    $hmac = drupal_hmac_base64($email, $secret);
    return hash_equals($hmac, $token);
}

//验证cancel_token
function sse_subscription_handle_cancel_page_check($email, $token) {
    if (!user_access('use sse_subscription functionality')) {
        return false;
    }
    if ($email === null || $token === null) {
        return false;
    }

    // Check Cancel Token from Database
    $cancel_token = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('cancel_token'))
        ->execute()
        ->fetch();

    if (!$cancel_token) {
        return false;
    }
    $cancel_token = $cancel_token->cancel_token;
    if (!$cancel_token) {
        return false;
    }

    return hash_equals($cancel_token, $token);
}

function sse_subscription_handle_start_page() {
    if (isset($_POST['mail'])) {
        $email = $_POST['mail'];
        $secret = variable_get('sse_subscription_secret');
        $hmac = drupal_hmac_base64($email, $secret);

        $url = url('subscribe/verify/'.$email.'/'.$hmac, array('absolute' => TRUE));

        $module_path = drupal_get_path('module', 'sse_subscription');
        $loader = new Twig_Loader_Filesystem($module_path.'/templates');
        $twig = new Twig_Environment($loader, array(
            'cache' => $module_path.'/cache',
        ));

        sse_subscription_send_mail($email, 'SSE订阅确认', $twig->render('subscribe.twig', array('url' => $url)));

        return theme("sse_subscription_send");
    }

    return theme("sse_subscription_enter");
}

//订阅菜单
function sse_subscription_handle_verify_page($email, $hmac) {
    if ($_POST) {
        //处理表单
        sse_subscription_handle_verify_page_post($email, $hmac);
    }

    $machine_name = 'notice_target';
    $field_hidden = 'field_taxonomy_target_hidden';

    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level1 = taxonomy_get_tree($vid);
    $target = array();
    $number_of_layers = -1;

    foreach ($level1 as $item) {
        $tid = $item->tid;
        $name = $item->name;
        $term = taxonomy_term_load($tid);

        $is_hidden = $term->{$field_hidden}[LANGUAGE_NONE][0]['value'];
        if ($is_hidden === '1') {
            continue;
        }

        if ($item->depth === 0) {
            $target[] = array();
            $number_of_layers++;
        }

        $target[$number_of_layers][] = array(
            'tid' => $tid,
            'name' => $name
        );
    }

    $machine_name = 'notice_category';
    $vid = taxonomy_vocabulary_machine_name_load($machine_name)->vid;
    $level1 = taxonomy_get_tree($vid);
    $category = array();

    foreach ($level1 as $item) {
        $tid = $item->tid;
        $name = $item->name;

        $category[] = array(
            'tid' => $tid,
            'name' => $name
        );
    }

    return theme("sse_subscription_sub", [
        "email" => $email,
        "target" => $target,
        "category" => $category,
    ]);
}

function sse_subscription_handle_cancel_page($email) {
    $now = time();

    //清除该用户的原始订阅

    //修改event表
    db_insert('sse_subscribe_events')
        ->fields(array(
            'at' => (int)$now,
            'type' => 1,
            'ua' => isset($_SERVER['HTTP_USER_AGENT'])? $_SERVER['HTTP_USER_AGENT'] : null,
            'ip' => $_SERVER['REMOTE_ADDR'],
            'mail' => $email,
        ))
        ->execute();

    //删除data表
    $sid = db_select('sse_subscribe_mail', 'm')
        ->condition('mail', $email)
        ->fields('m', array('sid'))
        ->execute()
        ->fetch()
        ->sid;
    db_delete('sse_subscribe_data')
        ->condition('sid', $sid)
        ->execute();

    //删除mail表
    db_delete('sse_subscribe_mail')
        ->condition('mail', $email)
        ->execute();

    return theme("sse_subscription_unsub", array("email" => $email));

}

function taxonomy_get_term_from_vid($vid) {
    $query = db_select('taxonomy_term_data', 't');
    $query->join('taxonomy_term_hierarchy', 'h', 'h.tid = t.tid');
    $query->fields('t', array('tid', 'name'));
    $query->condition('t.vid', $vid, '=');
    //$query->condition('h.parent', 0, '='); // remove this line to get all terms.
    $result = $query->execute();
    while ($record = $result->fetchAssoc()) {
        $data[$record['tid']] = t($record['name']);
    }

    return $data;
}

function get_node_json_from_nid($nid) {
    $node = node_load($nid);
    $result = [];

    $target_tid = [];
    $category_tid = [];

    $field_qunti = 'field_notice_target';
    $field_leibie = 'field_notice_category';
    $field_deadline = 'field_notice_deadline';

    $arr = $node->{$field_qunti}[LANGUAGE_NONE];
    $result['category_target'] = [];
    foreach ($arr as $n) {
        $name = taxonomy_term_load((int)$n['tid'])->name;
        $target_tid[] = (int)$n['tid'];
        $result['category_target'][] = taxonomy_term_load((int)$n['tid'])->name;
    }

    $arr = $node->{$field_leibie}[LANGUAGE_NONE];
    $result['category_content'] = [];
    foreach ($arr as $n) {
        $category_tid[] = (int)$n['tid'];
        $result['category_content'][] = taxonomy_term_load((int)$n['tid'])->name;
    }

    $arr = $node->{$field_deadline};
    if (empty($arr))
        $result['deadline_field'] = '';
    else
        $result['deadline_field'] = $arr[LANGUAGE_NONE][0]['value'];

    $result['title'] = $node->title;
    $result['publish_at'] = $node->created;
    $result['body'] = $node->body[LANGUAGE_NONE][0]['value'];

    $options = array('absolute' => TRUE);
    $result['link'] = url('node/'.$nid, $options);

    //查询email
    $result_set = db_query("SELECT DISTINCT mail, cancel_token FROM sse_subscribe_data DATA LEFT JOIN sse_subscribe_mail MAIL ON MAIL.sid = DATA.sid
        WHERE DATA.target_tid IN (:target_tids) AND DATA.category_tid IN (:category_tids)", array(
            ':target_tids' => $target_tid,
            ':category_tids' => $category_tid,
        ));
    foreach ($result_set as $target_mail) {
        $subscribe_mail = [];
        $subscribe_mail['mail'] = $target_mail->mail;
        $subscribe_mail['cancel_token'] = $target_mail->cancel_token;
        $result['subscribe_mails'][] = $subscribe_mail;
    }

    return $result;
}

function sse_subscription_handle_get_article_api($from) {
    $nids = db_select('node', 'n')
        ->condition('type', 'notice_content')
        ->condition('status', 1)
        ->condition('changed', (int)$from, '>')
        ->fields('n', array('nid'))
        ->execute();

    $result = [];
    foreach ($nids as $record) {
        $result[] = get_node_json_from_nid($record->nid);
    }

    drupal_json_output($result);
}

function sse_subscription_theme() {
    return array(
        'sse_subscription_enter' => array(
            'template' => 'templates/sse_subscription_enter',
        ),
        'sse_subscription_sub' => array(
            'template' => 'templates/sse_subscription_sub',
            'variables' => array('email' => null, 'group' => null, 'type' => null),
        ),
        'sse_subscription_unsub' => array(
            'template' => 'templates/sse_subscription_unsub',
            'variables' => array('email' => null),
        ),
        'sse_subscription_send' => array(
            'template' => 'templates/sse_subscription_send',
        ),
    );
}
